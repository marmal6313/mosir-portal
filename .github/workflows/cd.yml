name: CD

on:
  push:
    tags:
      - 'release-*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag to build/push (e.g. release-20250101)'
        required: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      tag: ${{ steps.vars.outputs.TAG }}
    steps:
      - uses: actions/checkout@v4
      - name: Set tag
        id: vars
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "TAG=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.vars.outputs.TAG }}
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    if: always()
    env:
      TS_OAUTH_CLIENT_ID: ${{ secrets.TS_OAUTH_CLIENT_ID }}
      TS_OAUTH_CLIENT_SECRET: ${{ secrets.TS_OAUTH_CLIENT_SECRET }}
      TS_AUTHKEY: ${{ secrets.TS_AUTHKEY }}
      TS_TAGS: ${{ secrets.TS_TAGS }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
    steps:
      - name: Connect to Tailscale (OAuth, with tags)
        if: ${{ env.TS_OAUTH_CLIENT_ID != '' && env.TS_OAUTH_CLIENT_SECRET != '' && env.TS_TAGS != '' }}
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ env.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ env.TS_OAUTH_CLIENT_SECRET }}
          hostname: gh-actions-deploy
          tags: ${{ env.TS_TAGS }}
      - name: Connect to Tailscale (OAuth)
        if: ${{ env.TS_OAUTH_CLIENT_ID != '' && env.TS_OAUTH_CLIENT_SECRET != '' && env.TS_TAGS == '' }}
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ env.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ env.TS_OAUTH_CLIENT_SECRET }}
          hostname: gh-actions-deploy
      - name: Connect to Tailscale (Auth key, with tags)
        if: ${{ (env.TS_OAUTH_CLIENT_ID == '' || env.TS_OAUTH_CLIENT_SECRET == '') && env.TS_AUTHKEY != '' && env.TS_TAGS != '' }}
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ env.TS_AUTHKEY }}
          hostname: gh-actions-deploy
          tags: ${{ env.TS_TAGS }}
      - name: Connect to Tailscale (Auth key)
        if: ${{ (env.TS_OAUTH_CLIENT_ID == '' || env.TS_OAUTH_CLIENT_SECRET == '') && env.TS_AUTHKEY != '' && env.TS_TAGS == '' }}
        uses: tailscale/github-action@v2
        with:
          authkey: ${{ env.TS_AUTHKEY }}
          hostname: gh-actions-deploy
      - name: Prepare IMAGE_REF
        id: ref
        run: echo "IMAGE_REF=ghcr.io/${{ github.repository }}:${{ needs.build-and-push.outputs.tag }}" >> $GITHUB_OUTPUT
      - name: Verify Tailscale connectivity
        shell: bash
        run: |
          set -euo pipefail
          echo "Self status:"
          tailscale status --self || true
          if [ -n "${{ secrets.SSH_HOST }}" ]; then
            echo "Pinging ${{ secrets.SSH_HOST }} via Tailscale..."
            tailscale ping -c 3 "${{ secrets.SSH_HOST }}"
          else
            echo "SSH_HOST secret is empty; skipping tailscale ping" >&2
          fi
      - name: Validate SSH secrets
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.SSH_HOST }}" ]; then
            echo "Missing required secret: SSH_HOST" >&2
            exit 1
          fi
          if [ -z "${{ secrets.SSH_KEY }}" ]; then
            echo "Missing required secret: SSH_KEY (private key)" >&2
            exit 1
          fi
          # Validate that the key looks like an OpenSSH private key (multi-line, with proper header)
          if ! (echo "${{ secrets.SSH_KEY }}" | grep -q "BEGIN OPENSSH PRIVATE KEY\|-BEGIN RSA PRIVATE KEY"); then
            echo "SSH_KEY does not look like a valid private key. Ensure it is multi-line and includes BEGIN/END headers." >&2
            exit 1
          fi
      - name: Check SSH_KEY_PASSPHRASE presence
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.SSH_KEY_PASSPHRASE }}" ]; then
            echo "NOTE: SSH_KEY_PASSPHRASE is empty or not defined in Secrets for environment 'production'." >&2
            echo "If your SSH_KEY is passphrase-protected, add it under Settings → Environments → production → Secrets." >&2
          else
            echo "SSH_KEY_PASSPHRASE is set (masked)."
          fi
      - name: Write SSH key to file
        shell: bash
        run: |
          set -euo pipefail
          umask 077
          printf '%s\n' "${{ secrets.SSH_KEY }}" > id_gha
          ls -l id_gha
      - name: Validate SSH key decryptability
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.SSH_KEY_PASSPHRASE }}" ]; then
            if ssh-keygen -y -P "${{ secrets.SSH_KEY_PASSPHRASE }}" -f id_gha >/dev/null 2>&1; then
              echo "SSH key decrypted successfully with provided passphrase."
            else
              echo "ERROR: Failed to decrypt SSH_KEY with SSH_KEY_PASSPHRASE. Check the passphrase or remove it from the key for CI use." >&2
              exit 1
            fi
          else
            # No passphrase provided; verify key is usable without passphrase
            if ssh-keygen -y -f id_gha >/dev/null 2>&1; then
              echo "SSH key is usable without passphrase."
            else
              echo "ERROR: SSH_KEY appears to be passphrase-protected, but SSH_KEY_PASSPHRASE is empty." >&2
              echo "Either set SSH_KEY_PASSPHRASE secret or remove the passphrase from the key and update SSH_KEY." >&2
              exit 1
            fi
          fi
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ env.SSH_USER || 'deploy' }}
          key_path: id_gha
          passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
          port: ${{ env.SSH_PORT || 22 }}
          script_stop: true
          script: |
            set -euo pipefail
            APP_PATH=${{ secrets.APP_PATH }}
            mkdir -p "$APP_PATH"
            cd "$APP_PATH"
            # Inicjalizacja: sklonuj repo raz, potem tylko pull
            if [ ! -d .git ]; then
              git init
              git remote add origin https://github.com/${{ github.repository }}.git
              git fetch --depth=1 origin main || true
              git checkout -f FETCH_HEAD || true
            else
              git fetch --depth=1 origin main || true
              git reset --hard FETCH_HEAD || true
            fi
            # Konfiguruj IMAGE_REF i odpal deployer
            export IMAGE_REF="${{ steps.ref.outputs.IMAGE_REF }}"
            # Wymuś wariant app-only, chyba że nadpisany sekretem DEPLOY_MODE
            export DEPLOY_MODE="${{ secrets.DEPLOY_MODE }}"
            if [ -z "$DEPLOY_MODE" ]; then export DEPLOY_MODE=app-only; fi
            bash scripts/deploy.sh
      - name: Smoke test /api/health
        if: ${{ success() }}
        shell: bash
        run: |
          set -euo pipefail
          HOST="${{ secrets.APP_HOSTNAME }}"
          if [ -z "${HOST}" ]; then HOST="app.e-mosir.pl"; fi
          echo "Checking https://${HOST}/api/health"
          for i in {1..30}; do
            code=$(curl -sS -o /dev/null -w "%{http_code}" "https://${HOST}/api/health" || true)
            if [ "$code" = "200" ]; then
              echo "Healthcheck OK (200)"
              exit 0
            fi
            echo "Attempt $i/30: status=$code; retrying in 5s..."
            sleep 5
          done
          echo "Smoke test failed: /api/health did not return 200"
          exit 1
